//----------------------------------------------------------------------------------------------------
// game_start()
//----------------------------------------------------------------------------------------------------
function game_start()
{
	lblActionText.Text = "";	
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click()
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
	// when mouse is clicked, text label is cleared
	lblActionText.Text = "";
	
	// when game is paused, clicks aren't processed
	if (IsGamePaused())
	{
		return;
	}
	
	// Left Mouse Button on Object/Character/Hotspot/Location
	// when no inventory is selected:
	// - INTERACT with target
	// - walk to location
	// else
	// - USE inventory on target
	else if (button == eMouseLeft)
	{
		if (GetLocationType(mouse.x, mouse.y) != eLocationNothing && Mouse.Visible)
		{
			if (cDebra.ActiveInventory == null)
			{ 
				ProcessClick(mouse.x, mouse.y, eModeInteract);
			}
			else
			{
				ProcessClick(mouse.x, mouse.y, eModeUseinv);
			}			
			
		}
		else
		{
			if (cDebra.ActiveInventory == null && Mouse.Visible)
			{
				ProcessClick(mouse.x, mouse.y, eModeWalkto);
			}
			else
			{
				cDebra.ActiveInventory = null;
			}
		}			
	}

	// Right Mouse Button on Object/Character/Hotspot/Location
	// when no inventory is selected:
	// - EXAMINE target
	// else
	// - DESELECT inventory
	else if (button == eMouseRight && Mouse.Visible)
	{
		if (cDebra.ActiveInventory != null)
		{
			cDebra.ActiveInventory = null;
		}
		
		else if (GetLocationType(mouse.x, mouse.y) != eLocationNothing && Mouse.Visible)
		{
			ProcessClick(mouse.x, mouse.y, eModeLookat);
		}
	}
	
	// Left Mouse Button on Inventory Item
	// when no inventory is selected:
	// - INTERACT with target 
	// - SELECT target
	// else
	// - USE inventory on target
	else if (button == eMouseLeftInv)
	{
		InventoryItem *i = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
		if (i != null)
		{
			if (i.GetProperty("propInstantUse") == true)
			{
				if (cDebra.ActiveInventory == null)
				{
					i.RunInteraction(eModeInteract);
				}
				else
				{
					i.RunInteraction(eModeUseinv);
				}
			}
			else
			{
				if (cDebra.ActiveInventory == null)
				{
					cDebra.ActiveInventory = i;
				}
				else
				{
					if (i.ID != cDebra.ActiveInventory.ID)
					{
						i.RunInteraction(eModeUseinv);
					}
				}
			}
		}
	}
	
	// Right Mouse Button on Inventory Item
	// when no inventory is selected:
	// - EXAMINE target
	// else
	// - DESELECT INVENTORY
	else if (button == eMouseRightInv)
	{
		if (cDebra.ActiveInventory != null)
		{
			cDebra.ActiveInventory = null;
			return;
		}
		
		InventoryItem *i = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
		if (i != null)
		{
			i.RunInteraction(eModeLookat);
		}
	}
	
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute()
//----------------------------------------------------------------------------------------------------
function repeatedly_execute()
{
	// Inventory GUI: 
	// - make visible if mouse "touches" trigger zone
	// - make invisible if mouse leaves inventory GUI
	if (!gInventoryBar.Visible && mouse.y <= INVENTORY_POPUP_POSITION)
	{
		gInventoryBar.Visible = true;
	}
	
	if (gInventoryBar.Visible && mouse.y > gInventoryBar.Height)
	{
		gInventoryBar.Visible = false;
	}
	
	// Action Text
	// We always display the name of what is under the mouse, with one exception:
	// IF the player has an inventory item selected and hovers over the same inventory item, 
	// we display nothing to indicate that an item can not be used on itself
	if (cDebra.ActiveInventory == null)
	{
		lblActionText.Text = Game.GetLocationName(mouse.x, mouse.y);
	}
	else
	{
		InventoryItem *i = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
		if (i != null && (i.ID == cDebra.ActiveInventory.ID))
		{
			lblActionText.Text = "";
		}
		else
		{
			lblActionText.Text = Game.GetLocationName(mouse.x, mouse.y);
		}
	}

}