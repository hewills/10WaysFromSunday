// room script file
bool _useFancyIconbar = false;
bool _iconbarVisible = false;

// Make sure you call this when you click a button on the iconbar and want to hide it.
function HideIconbar()
{	
	_iconbarVisible = false;
	gIconbar.StopAllTweens();
	gIconbar.TweenTransparency(0.4, 100, eEaseOutTween, eNoBlockTween);
}
// Shows the iconbar with some tween action!
function ShowIconbar()
{
  gIconbar.SetPosition(0, -gIconbar.Height);
  gIconbar.Transparency = 100;
  _iconbarVisible = true;
  
  gIconbar.StopAllTweens();
  gIconbar.TweenPosition(0.4, 0, 0, eEaseOutBackTween, eNoBlockTween);
  gIconbar.TweenTransparency(0.4, 0, eEaseInEaseOutTween, eNoBlockTween);
}

// Enter room (after fadein):
function room_AfterFadeIn()
{
  StartCutscene(eSkipESCOnly);
  Display2("Welcome to Demo 3.");
  Display2("Here we will demonstrate some GUI Tweens that hopefully can improve your GUIs.");
  Display2("Like Room Objects and Characters, GUIs can both be tweened in Position and Transparency.");
  Display2("You can also tween GUI elements like Labels, Lists, etc!");
  Display2("Note that on the Tween script module header, you can customize whether GUI tweens are blocking or not by default.");
  Display2("Let's tween the size:");
  
  int width = gStatusline.Width;
  int height = gStatusline.Height;
  
  gStatusline.TweenSize(2.0, System.ViewportWidth, System.ViewportHeight, eEaseOutTween, eBlockTween);
  gStatusline.TweenPosition(2.0, System.ViewportWidth / 2, System.ViewportHeight / 2, eEaseInTween, eNoBlockTween);
  gStatusline.TweenSize(2.0, 0, 0, eEaseInTween, eBlockTween);
  gStatusline.TweenPosition(2.0, 0, 0, eEaseOutExpoTween, eNoBlockTween);
  gStatusline.TweenSize(2.0, width, height, eEaseOutExpoTween, eBlockTween);
  
  Display2("Wasn't that fun?");
  gStatusline.TweenTransparency(0.5, 100, eEaseLinearTween, eNoBlockTween);
  Display2("Now, here's what we're going to do:");
  gIconbar.SetPosition(0, 0);
  gIconbar.Visible = true;
  Display2("The default Iconbar in AGS is very stale.");
  Display2("What if it could fade in while sliding down when putting the mouse over, and fades out when the mouse goes away?");
  Display2("You could probably do it blocking with a Wait statement forcing the player to wait for the animation.");
  Display2("That's annoying!");
  gIconbar.Visible = false;
  Display2("How about this:");
  
  // Note that for this to work, you have to change the iconbar away from the "popup on mouse Y" mode.
  _useFancyIconbar = true;
  Wait(SecondsToLoops(1.0));
  
  Display2("Well, go ahead! Move your cursor up to the iconbar and see the difference.");
  Display2("(This is the end of the demo, by the way, so enjoy that new iconbar.)");
  
  EndCutscene();
}

// Repeatedly execute:
function room_RepExec()
{
  // Normally, you would put this check on the global script repeatedly_execute function.
  if (_useFancyIconbar)
  {
    if (mouse.y > gIconbar.Height && _iconbarVisible)
    {
      HideIconbar();
    }
    
    if (mouse.y <= 13 && !gIconbar.Visible && !IsGamePaused())
    {		
      ShowIconbar();
    }
  }
}

function room_Load()
{
  gStatusline.Visible = true;
}

function room_Leave()
{
  gStatusline.Visible = false;
}
