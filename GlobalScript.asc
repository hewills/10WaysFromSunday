// Global Variables

int comm_done = 0;


// A function that initializes a bunch of stuff. -----------------------------------------------------
function initialize_control_panel() { 

  // Center the control panel
  gControlPanel.Centre();
    
  // Set all the defaults
  System.Volume = 70;
  sldAudio.Value = System.Volume;
  SetGameSpeed(60);
  sldSpeed.Value =60;
  
 Game.NormalFont = eFontfntTiny;  //Dialog font

}
// ------------------- End Initialize ----------------------------------------------------------------



//----------------------------------------------------------------------------------------------------
// game_start
//----------------------------------------------------------------------------------------------------
function game_start() 
{
  
  lGPS.AddItem("Home");
  lGPS.AddItem("Church");
  lGPS.AddItem("Work");
  lGPS.AddItem("Downtown");
  gGPS.SetPosition(80, 50);
  
  initialize_control_panel();
  
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute
//----------------------------------------------------------------------------------------------------
function repeatedly_execute() 
{
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute_always
//----------------------------------------------------------------------------------------------------
function repeatedly_execute_always() 
{
}


// ------------------- Save Game Dialog --------------------------------------------------------------
function show_save_game_dialog()
{
  
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);

}
// ------------------End Save Dialog------------------------------------------------------------------


//------------------ Restore Game Dialog -------------------------------------------------------------
function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  
}
//------------------End Restore Dialog---------------------------------------------------------------

// --- SAVE functions ----
function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}


function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}


function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}
// ------------ End SAVE functions -------------


// ----- RESTORE functions ---------------------

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}


function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}
// ---- End RESTORE functions


//Loading
function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
  Wait(1);
  show_restore_game_dialog();
}

//Resume
function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
}


//Inventory Quit
function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  //gControlPanel.Visible = false;
  //Wait(1);
  //QuitGame(1);
  gControlPanel.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

//Control Panel Quit
function btnQuit2_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  gControlPanel.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

//Audio Change
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

//Speed Change
function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
    gControlPanel.Visible = false;
    show_save_game_dialog();
}



//----------------------------------------------------------------------------------------------------
// on_key_press
//----------------------------------------------------------------------------------------------------
function on_key_press(eKeyCode keycode) 
{
 
  if (IsGamePaused()) keycode = 0;
  
  // "System Keys"
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  
  // Debugger Keys
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
  
  
  if (keycode == eKeyCtrlG) {
    
      if (gGPS.Visible) { 
          gGPS.Visible = false;
      }
      else 
          gGPS.Visible = true; // show GPS
      
  }
  
  if (keycode == eKeyCtrlL) {
    
      if (gList.Visible) { 
          gList.Visible = false;
      }
      else 
          gList.Visible = true; // show 10 commandments
      
  }
  
 if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  
  
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
  if ((keycode == eKeyEscape) && gControlPanel.Visible) {
    // Use ESC to turn the panel off.
    gControlPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    return;
  }
  
    // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gControlPanel.Visible = true; 
    mouse.UseModeGraphic(eModePointer);
  }
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
	// all mouse clicks are handled in TwoClickHandler.asc!
}

//----------------------------------------------------------------------------------------------------
// on_event
//----------------------------------------------------------------------------------------------------
function on_event (EventType event, int data) 
{
}

//----------------------------------------------------------------------------------------------------
// unhandled_event
//----------------------------------------------------------------------------------------------------
function unhandled_event (int what, int type) 
{
	if (what == 1) // Unhandled events for HOTSPOTS
	{
		if (type == 1) // look
		{
			player.Say("Meh. Nothing special.");
		}
		if (type == 2) // interact
		{
			player.Say("I can't do anything with it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That won't do a thing.");
		}
	}
	if (what == 2) // Unhandled events for OBJECTS
	{
		if (type == 0) // look
		{
			player.Say("Looks like a thing.");
		}
		if (type == 1) // interact
		{
			player.Say("I don't want it.");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's a silly thing to do.");
		}
	}
	if (what == 3) // Unhandled events for CHARACTERS
	{
		if (type == 0) // look
		{
			player.Say("Another one of God's children.");
		}
		if (type == 1) // interact
		{
			player.Say("I don't have anything to say.");
		}
		if (type == 3) // use inv on
		{
			player.Say("I don't think I should give that away.");
		}
	}
	if (what == 5) // Unhandled events for INVENTORY ITEMS
	{
		if (type == 0) // look
		{
			player.Say("Just stuff in my pocket.");
		}
		if (type == 1) // interact
		{
			player.Say("Um, no?");
		}
		if (type == 3) // use inv on
		{
			player.Say("That's ridiculous.");
		}
	}
}

//----------------------------------------------------------------------------------------------------
// dialog_request
//----------------------------------------------------------------------------------------------------
function dialog_request(int param) 
{
}

//----------------------------------------------------------------------------------------------------
// gInventoryBar
//----------------------------------------------------------------------------------------------------
function btnInvScrollLeft_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollDown();
}

function btnInvScrollRight_OnClick(GUIControl *control, MouseButton button)
{
	InventoryWindow1.ScrollUp();
}


//Church Sign buttons
function bQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function bOptions_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

function bStart_OnClick(GUIControl *control, MouseButton button)
{
  gSign.Visible = false;
  aGodbewithyou.Stop();
  
  //Start Game
  cDebra.ChangeRoom(1, 380, 213);
  
}

// Show 10 commandments
function showList()  {
  
  if (comm_done == 0) {    
   gList.BackgroundGraphic = 109;
  }
  else if (comm_done == 1) {
   gList.BackgroundGraphic = 110; 
  }
  else if (comm_done == 2) {
   gList.BackgroundGraphic = 111;     
  }
  else if (comm_done == 3) {
   gList.BackgroundGraphic = 112;
  }
  else if (comm_done == 4) {
   gList.BackgroundGraphic = 113; 
  }
  else if (comm_done == 5) {
   gList.BackgroundGraphic = 114;
  }
  else if (comm_done == 6) {
   gList.BackgroundGraphic = 115;     
  }
  else if (comm_done == 7) {
   gList.BackgroundGraphic = 116;
  }
  else if (comm_done == 8) {
   gList.BackgroundGraphic = 117;
  }
  else if (comm_done == 9) {
   gList.BackgroundGraphic = 118;    
  }
  else if (comm_done == 10) {
   gList.BackgroundGraphic = 119;
  }
  else gList.BackgroundGraphic = 109;

  PauseGame();
  gList.Visible = true;
  
}
// 10 commandments close Button
function bListClose_OnClick(GUIControl *control, MouseButton button)
{
  gList.Visible = false;
  UnPauseGame();
}
// Update commandment list
function updateList(int number_done) {
 
 aThunder.Play();
 comm_done = number_done;
  
}


// GPS GUI List
function showGPS() {
  
  gGPS.SetPosition(80, 50);
  gGPS.Visible = true;
  PauseGame();
   
}
// GPS Cancel Button
function bCancel_OnClick(GUIControl *control, MouseButton button)
{
  UnPauseGame();
  gGPS.Visible = false;
}
// GPS Go Button
function bGPS_go_OnClick(GUIControl *control, MouseButton button)
{
  UnPauseGame();
  gGPS.Visible = false;
  
  String selectedLoc = "Home";
  
  if (lGPS.SelectedIndex >= 0)
  {
      selectedLoc = lGPS.Items[lGPS.SelectedIndex];
  

    if (selectedLoc == "Home") {
   
      cDebra.ChangeRoom(3, 90, 180);
    
    }
    else if (selectedLoc == "Work") {
    
      cDebra.ChangeRoom(4, 120, 205, eDirectionUp);
   
    }
    else if (selectedLoc == "Church") {
    
      cDebra.ChangeRoom(1, 433, 218);
   
    }
    else if (selectedLoc == "Downtown") {
    
      cDebra.ChangeRoom(8, 130, 215, eDirectionUp);
   
    }
    else if (selectedLoc == "Mercury Motors") {
    
      cDebra.ChangeRoom(7, 65, 215, eDirectionUp);
   
    }
      else cDebra.ChangeRoom(3, 82, 175); //default Home
  
  }
}


///// INVENTORY items  ////////////////

function iList_Look()
{
    showList();   
}

function iDraino_Look()
{
  cDebra.Say("A bottle of Draino. 'Do not get in eyes. Do not consume.'");
}

function iMarker_Look()
{
  cDebra.Say("My black magic marker.");
}

function iMusic_Look()
{
  cDebra.Say("It's organ sheet music. 'Toccata' from Henri Mulet's Byzantine Sketches.");
}

function iScissors_Look()
{
  cDebra.Say("A pair of scissors.");
}

function iRing_Look()
{
  cDebra.Say("A man's gold wedding ring.");
}

function iPhone_Look()
{
  cDebra.Say("My cheap cellphone.");
}

function iWood_Look()
{
  cDebra.Say("Pieces of wood.");
}

function iPaper_Look()
{
  cDebra.Say("A blank piece of paper.");
}

function iNails_Look()
{
  cDebra.Say("A handful of metal nails.");
}

function iMoney_Look()
{
  cDebra.Say("A ten dollar bill!");
}
// End of Looking at Inventory ///////

